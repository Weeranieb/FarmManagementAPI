definitions:
  httputil.ErrorResponseModel:
    properties:
      code:
        example: "400"
        type: string
      message:
        example: status bad request
        type: string
    type: object
  httputil.ResponseModel:
    properties:
      data: {}
      error: {}
      result:
        type: boolean
    type: object
  models.ActivePond:
    properties:
      createdBy:
        type: string
      createdDate:
        type: string
      delFlag:
        type: boolean
      endDate:
        type: string
      id:
        type: integer
      isActive:
        type: boolean
      pondId:
        type: integer
      startDate:
        type: string
      updatedBy:
        type: string
      updatedDate:
        type: string
    type: object
  models.ActivityWithSellDetail:
    properties:
      activePondId:
        type: integer
      activityDate:
        type: string
      amount:
        type: integer
      createdBy:
        type: string
      createdDate:
        type: string
      delFlag:
        type: boolean
      fishType:
        type: string
      fishUnit:
        type: string
      fishWeight:
        type: number
      id:
        type: integer
      merchantId:
        type: integer
      mode:
        type: string
      pricePerUnit:
        type: number
      sellDetails:
        items:
          $ref: '#/definitions/models.SellDetail'
        type: array
      toActivePondId:
        type: integer
      updatedBy:
        type: string
      updatedDate:
        type: string
    type: object
  models.AddActivePond:
    properties:
      pondId:
        type: integer
      startDate:
        type: string
    type: object
  models.AddBill:
    properties:
      farmGroupId:
        type: integer
      other:
        type: string
      paidAmount:
        type: number
      paymentDate:
        type: string
      type:
        type: string
    type: object
  models.AddClient:
    properties:
      contactNumber:
        type: string
      name:
        type: string
      ownerName:
        type: string
    type: object
  models.AddDailyFeed:
    properties:
      activePondId:
        type: integer
      amount:
        type: number
      feedCollectionId:
        type: integer
      feedDate:
        type: string
    type: object
  models.AddFarm:
    properties:
      code:
        type: string
      name:
        type: string
    type: object
  models.AddFarmGroup:
    properties:
      code:
        type: string
      name:
        type: string
    type: object
  models.AddFarmOnFarmGroup:
    properties:
      farmGroupId:
        type: integer
      farmId:
        type: integer
    type: object
  models.AddFeedCollection:
    properties:
      clientId:
        type: integer
      code:
        type: string
      name:
        type: string
      unit:
        type: string
    type: object
  models.AddFeedPriceHistory:
    properties:
      feedCollectionId:
        type: integer
      price:
        type: number
      priceUpdatedDate:
        type: string
    type: object
  models.AddMerchant:
    properties:
      contactNumber:
        type: string
      location:
        type: string
      name:
        type: string
    type: object
  models.AddPond:
    properties:
      code:
        type: string
      farmId:
        type: integer
      name:
        type: string
    type: object
  models.AddSellDetail:
    properties:
      amount:
        type: number
      fishType:
        type: string
      fishUnit:
        type: string
      pricePerUnit:
        type: number
      sellId:
        type: integer
      size:
        type: string
    type: object
  models.AddUser:
    properties:
      clientId:
        type: integer
      contactNumber:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
      userLevel:
        type: integer
      username:
        type: string
    type: object
  models.Bill:
    properties:
      createdBy:
        type: string
      createdDate:
        type: string
      delFlag:
        type: boolean
      farmGroupId:
        type: integer
      id:
        type: integer
      other:
        type: string
      paidAmount:
        type: number
      paymentDate:
        type: string
      type:
        type: string
      updatedBy:
        type: string
      updatedDate:
        type: string
    type: object
  models.Client:
    properties:
      contactNumber:
        type: string
      createdBy:
        type: string
      createdDate:
        type: string
      delFlag:
        type: boolean
      id:
        type: integer
      isActive:
        type: boolean
      name:
        type: string
      ownerName:
        type: string
      updatedBy:
        type: string
      updatedDate:
        type: string
    type: object
  models.CreateActivityRequest:
    properties:
      activePondId:
        type: integer
      activityDate:
        type: string
      amount:
        type: integer
      fishType:
        type: string
      fishUnit:
        type: string
      fishWeight:
        type: number
      merchantId:
        type: integer
      mode:
        type: string
      pricePerUnit:
        type: number
      sellDetails:
        items:
          $ref: '#/definitions/models.AddSellDetail'
        type: array
      toActivePondId:
        type: integer
    type: object
  models.DailyFeed:
    properties:
      activePondId:
        type: integer
      amount:
        type: number
      createdBy:
        type: string
      createdDate:
        type: string
      delFlag:
        type: boolean
      feedCollectionId:
        type: integer
      feedDate:
        type: string
      id:
        type: integer
      updatedBy:
        type: string
      updatedDate:
        type: string
    type: object
  models.Farm:
    properties:
      clientId:
        type: integer
      code:
        type: string
      createdBy:
        type: string
      createdDate:
        type: string
      delFlag:
        type: boolean
      id:
        type: integer
      name:
        type: string
      updatedBy:
        type: string
      updatedDate:
        type: string
    type: object
  models.FarmGroup:
    properties:
      clientId:
        type: integer
      code:
        type: string
      createdBy:
        type: string
      createdDate:
        type: string
      delFlag:
        type: boolean
      id:
        type: integer
      name:
        type: string
      updatedBy:
        type: string
      updatedDate:
        type: string
    type: object
  models.FeedCollection:
    properties:
      clientId:
        type: integer
      code:
        type: string
      createdBy:
        type: string
      createdDate:
        type: string
      delFlag:
        type: boolean
      id:
        type: integer
      name:
        type: string
      unit:
        type: string
      updatedBy:
        type: string
      updatedDate:
        type: string
    type: object
  models.FeedPriceHistory:
    properties:
      createdBy:
        type: string
      createdDate:
        type: string
      delFlag:
        type: boolean
      feedCollectionId:
        type: integer
      id:
        type: integer
      price:
        type: number
      priceUpdatedDate:
        type: string
      updatedBy:
        type: string
      updatedDate:
        type: string
    type: object
  models.Login:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.Merchant:
    properties:
      contactNumber:
        type: string
      createdBy:
        type: string
      createdDate:
        type: string
      delFlag:
        type: boolean
      id:
        type: integer
      location:
        type: string
      name:
        type: string
      updatedBy:
        type: string
      updatedDate:
        type: string
    type: object
  models.Pond:
    properties:
      code:
        type: string
      createdBy:
        type: string
      createdDate:
        type: string
      delFlag:
        type: boolean
      farmId:
        type: integer
      id:
        type: integer
      name:
        type: string
      updatedBy:
        type: string
      updatedDate:
        type: string
    type: object
  models.SellDetail:
    properties:
      amount:
        type: number
      createdBy:
        type: string
      createdDate:
        type: string
      delFlag:
        type: boolean
      fishType:
        type: string
      fishUnit:
        type: string
      id:
        type: integer
      pricePerUnit:
        type: number
      sellId:
        type: integer
      size:
        type: string
      updatedBy:
        type: string
      updatedDate:
        type: string
    type: object
  models.User:
    properties:
      clientId:
        type: integer
      contactNumber:
        type: string
      createdBy:
        type: string
      createdDate:
        type: string
      delFlag:
        type: boolean
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
      updatedBy:
        type: string
      updatedDate:
        type: string
      userLevel:
        type: integer
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/activepond:
    get:
      consumes:
      - application/json
      description: Get list of active pond
      parameters:
      - description: Farm ID
        in: query
        name: farmId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Get list of active pond
      tags:
      - activepond
    post:
      consumes:
      - application/json
      description: Add a new active pond
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: New Active Pond data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.AddActivePond'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Add a new active pond
      tags:
      - activepond
    put:
      consumes:
      - application/json
      description: Update an active pond
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Updated Active Pond data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ActivePond'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Update an active pond
      tags:
      - activepond
  /api/v1/activepond/{id}:
    get:
      consumes:
      - application/json
      description: Get an active pond by ID
      parameters:
      - description: Active Pond ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Get an active pond by ID
      tags:
      - activepond
  /api/v1/activity:
    post:
      consumes:
      - application/json
      description: Add a new activity
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: New Activity data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.CreateActivityRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Add a new activity
      tags:
      - activity
    put:
      consumes:
      - application/json
      description: Update an activity
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Updated Activity data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ActivityWithSellDetail'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Update an activity
      tags:
      - activity
  /api/v1/activity/{id}:
    get:
      consumes:
      - application/json
      description: Get an activity by ID
      parameters:
      - description: Activity ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Get an activity by ID
      tags:
      - activity
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Login user with provided credentials and return JWT token
      parameters:
      - description: Login data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Login user
      tags:
      - auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided details
      parameters:
      - description: User data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.AddUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Register a new user
      tags:
      - auth
  /api/v1/bill:
    post:
      consumes:
      - application/json
      description: Add a new bill with the provided details
      parameters:
      - description: Bill data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.AddBill'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Add a new bill
      tags:
      - bill
    put:
      consumes:
      - application/json
      description: Update an existing bill with the provided details
      parameters:
      - description: Bill data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Bill'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Update an existing bill
      tags:
      - bill
  /api/v1/bill/{id}:
    get:
      consumes:
      - application/json
      description: Get a bill by its ID
      parameters:
      - description: Bill ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Get bill by ID
      tags:
      - bill
  /api/v1/client:
    get:
      consumes:
      - application/json
      description: Retrieve details of the currently logged-in client
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Get client details
      tags:
      - client
    post:
      consumes:
      - application/json
      description: Add a new client with the provided details
      parameters:
      - description: Client data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.AddClient'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Add a new client
      tags:
      - client
    put:
      consumes:
      - application/json
      description: Update details of the currently logged-in client
      parameters:
      - description: Client data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Client'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Update client details
      tags:
      - client
  /api/v1/dailyfeed:
    post:
      consumes:
      - application/json
      description: Add a new daily feed entry with the provided details
      parameters:
      - description: Daily Feed data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.AddDailyFeed'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Add a new daily feed entry
      tags:
      - dailyfeed
    put:
      consumes:
      - application/json
      description: Update details of a daily feed entry
      parameters:
      - description: Daily Feed data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.DailyFeed'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Update daily feed entry
      tags:
      - dailyfeed
  /api/v1/dailyfeed/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve details of a specific daily feed entry by its ID
      parameters:
      - description: Daily Feed ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Get daily feed entry by ID
      tags:
      - dailyfeed
  /api/v1/farm:
    post:
      consumes:
      - application/json
      description: Add a new farm entry with the provided details
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Farm data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.AddFarm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Add a new farm entry
      tags:
      - farm
    put:
      consumes:
      - application/json
      description: Update details of a farm entry
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Farm data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Farm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Update farm entry
      tags:
      - farm
  /api/v1/farm/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve details of a specific farm by its ID
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Farm ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Get farm by ID
      tags:
      - farm
  /api/v1/farmGroup:
    post:
      consumes:
      - application/json
      description: Add a new farm group entry with the provided details
      parameters:
      - description: Farm group data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.AddFarmGroup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Add a new farm group entry
      tags:
      - farmGroup
    put:
      consumes:
      - application/json
      description: Update details of a farm group entry
      parameters:
      - description: Farm group data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.FarmGroup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Update farm group entry
      tags:
      - farmGroup
  /api/v1/farmGroup/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve details of a specific farm group by its ID
      parameters:
      - description: Farm group ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Get farm group by ID
      tags:
      - farmGroup
  /api/v1/farmGroup/{id}/farmList:
    get:
      consumes:
      - application/json
      description: Retrieve a list of farms associated with a specific farm group
        by its ID
      parameters:
      - description: Farm group ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Get list of farms associated with a specific farm group
      tags:
      - farmGroup
  /api/v1/farmOnFarmGroup:
    post:
      consumes:
      - application/json
      description: Add a farm to a farm group with the provided details
      parameters:
      - description: Farm on farm group data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.AddFarmOnFarmGroup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Add a farm to a farm group
      tags:
      - farmOnFarmGroup
  /api/v1/farmOnFarmGroup/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a farm from a farm group by its ID
      parameters:
      - description: Farm on farm group ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Remove a farm from a farm group
      tags:
      - farmOnFarmGroup
  /api/v1/feedcollection:
    post:
      consumes:
      - application/json
      description: Add a new feed collection with the provided details
      parameters:
      - description: Feed collection data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.AddFeedCollection'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Add a feed collection
      tags:
      - feedcollection
    put:
      consumes:
      - application/json
      description: Update an existing feed collection with new details
      parameters:
      - description: Updated feed collection data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.FeedCollection'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Update a feed collection
      tags:
      - feedcollection
  /api/v1/feedcollection/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a feed collection by its ID
      parameters:
      - description: Feed collection ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Get a feed collection by ID
      tags:
      - feedcollection
  /api/v1/feedpricehistory:
    post:
      consumes:
      - application/json
      description: Add a new entry to the feed price history with the provided details
      parameters:
      - description: Feed price history data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.AddFeedPriceHistory'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Add a feed price history entry
      tags:
      - feedpricehistory
    put:
      consumes:
      - application/json
      description: Update an existing entry in the feed price history with new details
      parameters:
      - description: Updated feed price history data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.FeedPriceHistory'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Update a feed price history entry
      tags:
      - feedpricehistory
  /api/v1/feedpricehistory/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a feed price history entry by its ID
      parameters:
      - description: Feed price history entry ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Get a feed price history entry by ID
      tags:
      - feedpricehistory
  /api/v1/merchant:
    post:
      consumes:
      - application/json
      description: Create a new merchant with the provided details
      parameters:
      - description: Merchant data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.AddMerchant'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Add a new merchant
      tags:
      - merchant
    put:
      consumes:
      - application/json
      description: Update an existing merchant with new details
      parameters:
      - description: Updated merchant data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Merchant'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Update a merchant
      tags:
      - merchant
  /api/v1/merchant/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a merchant by its ID
      parameters:
      - description: Merchant ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Get a merchant by ID
      tags:
      - merchant
  /api/v1/pond:
    get:
      consumes:
      - application/json
      description: Retrieve a list of ponds belonging to a specific farm
      parameters:
      - description: Farm ID
        in: query
        name: farmId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Get a list of ponds by farm ID
      tags:
      - pond
    post:
      consumes:
      - application/json
      description: Create a new pond with the provided details
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Pond data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.AddPond'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Add a new pond
      tags:
      - pond
    put:
      consumes:
      - application/json
      description: Update an existing pond with new details
      parameters:
      - description: Updated pond data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Pond'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Update a pond
      tags:
      - pond
  /api/v1/pond/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a pond by its ID
      parameters:
      - description: Pond ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Get a pond by ID
      tags:
      - pond
  /api/v1/user:
    get:
      consumes:
      - application/json
      description: Retrieve the user details of the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Get the current user
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Create a new user with the provided details
      parameters:
      - description: User data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.AddUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Add a new user
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update the details of the currently authenticated user
      parameters:
      - description: Updated user data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Update the current user
      tags:
      - user
  /api/v1/user/list:
    get:
      consumes:
      - application/json
      description: Retrieve a list of users associated with the current client ID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.ResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.ErrorResponseModel'
      summary: Get a list of users
      tags:
      - user
swagger: "2.0"
