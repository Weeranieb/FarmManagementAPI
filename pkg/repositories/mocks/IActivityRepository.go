// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	models "boonmafarm/api/pkg/models"

	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	repositories "boonmafarm/api/pkg/repositories"
)

// IActivityRepository is an autogenerated mock type for the IActivityRepository type
type IActivityRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: request
func (_m *IActivityRepository) Create(request *models.Activity) (*models.Activity, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.Activity
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Activity) (*models.Activity, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*models.Activity) *models.Activity); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Activity)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.Activity) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FirstByQuery provides a mock function with given fields: query, args
func (_m *IActivityRepository) FirstByQuery(query interface{}, args ...interface{}) (*models.Activity, error) {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FirstByQuery")
	}

	var r0 *models.Activity
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) (*models.Activity, error)); ok {
		return rf(query, args...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) *models.Activity); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Activity)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, ...interface{}) error); ok {
		r1 = rf(query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TakeById provides a mock function with given fields: id
func (_m *IActivityRepository) TakeById(id int) (*models.Activity, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for TakeById")
	}

	var r0 *models.Activity
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.Activity, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *models.Activity); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Activity)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TakePage provides a mock function with given fields: clientId, page, pageSize, orderBy, keyword, mode, farmId
func (_m *IActivityRepository) TakePage(clientId int, page int, pageSize int, orderBy string, keyword string, mode *string, farmId *int) (*[]models.Activity, int64, error) {
	ret := _m.Called(clientId, page, pageSize, orderBy, keyword, mode, farmId)

	if len(ret) == 0 {
		panic("no return value specified for TakePage")
	}

	var r0 *[]models.Activity
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, int, string, string, *string, *int) (*[]models.Activity, int64, error)); ok {
		return rf(clientId, page, pageSize, orderBy, keyword, mode, farmId)
	}
	if rf, ok := ret.Get(0).(func(int, int, int, string, string, *string, *int) *[]models.Activity); ok {
		r0 = rf(clientId, page, pageSize, orderBy, keyword, mode, farmId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Activity)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, int, string, string, *string, *int) int64); ok {
		r1 = rf(clientId, page, pageSize, orderBy, keyword, mode, farmId)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, int, string, string, *string, *int) error); ok {
		r2 = rf(clientId, page, pageSize, orderBy, keyword, mode, farmId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: request
func (_m *IActivityRepository) Update(request *models.Activity) error {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Activity) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithTrx provides a mock function with given fields: trxHandle
func (_m *IActivityRepository) WithTrx(trxHandle *gorm.DB) repositories.IActivityRepository {
	ret := _m.Called(trxHandle)

	if len(ret) == 0 {
		panic("no return value specified for WithTrx")
	}

	var r0 repositories.IActivityRepository
	if rf, ok := ret.Get(0).(func(*gorm.DB) repositories.IActivityRepository); ok {
		r0 = rf(trxHandle)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repositories.IActivityRepository)
		}
	}

	return r0
}

// NewIActivityRepository creates a new instance of IActivityRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIActivityRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IActivityRepository {
	mock := &IActivityRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
