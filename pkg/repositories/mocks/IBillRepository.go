// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	models "boonmafarm/api/pkg/models"

	mock "github.com/stretchr/testify/mock"
)

// IBillRepository is an autogenerated mock type for the IBillRepository type
type IBillRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: pond
func (_m *IBillRepository) Create(pond *models.Bill) (*models.Bill, error) {
	ret := _m.Called(pond)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.Bill
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Bill) (*models.Bill, error)); ok {
		return rf(pond)
	}
	if rf, ok := ret.Get(0).(func(*models.Bill) *models.Bill); ok {
		r0 = rf(pond)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Bill)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.Bill) error); ok {
		r1 = rf(pond)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FirstByQuery provides a mock function with given fields: query, args
func (_m *IBillRepository) FirstByQuery(query interface{}, args ...interface{}) (*models.Bill, error) {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FirstByQuery")
	}

	var r0 *models.Bill
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) (*models.Bill, error)); ok {
		return rf(query, args...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) *models.Bill); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Bill)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, ...interface{}) error); ok {
		r1 = rf(query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TakeById provides a mock function with given fields: id
func (_m *IBillRepository) TakeById(id int) (*models.Bill, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for TakeById")
	}

	var r0 *models.Bill
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.Bill, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *models.Bill); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Bill)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: pond
func (_m *IBillRepository) Update(pond *models.Bill) error {
	ret := _m.Called(pond)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Bill) error); ok {
		r0 = rf(pond)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIBillRepository creates a new instance of IBillRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIBillRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IBillRepository {
	mock := &IBillRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
